{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["defaults","App","canvasRef","useRef","useState","primaryText","setPrimaryText","secondaryText","setSecondarytext","emoji","setEmoji","className","IconButton","onClick","toPng","current","pixelRatio","then","dataUrl","link","document","createElement","download","split","splice","join","Date","now","toISOString","substring","href","click","GetAppRounded","navigator","share","a","fetch","blob","files","File","type","lastModified","getTime","ShareRounded","id","ref","toUpperCase","src","alt","text","splitIndex","length","firstPart","secondPart","decorateText","TextField","label","variant","value","onChange","e","target","onSelect","unified","style","width","exclude","showSkinTones","showPreview","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.47bb0512.chunk.js","sourcesContent":["import React, { useState, useRef } from 'react';\nimport {\n  TextField,\n  IconButton,\n} from '@material-ui/core'\nimport {\n  Rotate90DegreesCcwRounded,\n  GetAppRounded,\n  ShareRounded,\n} from '@material-ui/icons'\nimport { Picker } from 'emoji-mart';\nimport { toPng } from 'html-to-image';\n\nimport 'emoji-mart/css/emoji-mart.css'\nimport './App.scss';\n\nconst defaults = {\n  primaryText: 'Ön is szeretne saját plakátot?',\n  secondaryText: 'Készítsen egyet!',\n  emoji: '1f9d1-200d-1f3a8', // artist emoji\n};\n\nconst App = () => {\n  const canvasRef = useRef(null);\n  const [primaryText, setPrimaryText] = useState(defaults.primaryText);\n  const [secondaryText, setSecondarytext] = useState(defaults.secondaryText);\n  const [emoji, setEmoji] = useState(defaults.emoji);\n\n  const decorateText = (text) => {\n    const splitText = text.split(' ');\n    const splitIndex = splitText.length > 2 ? 2 : 1;\n    const firstPart = text.split(' ').splice(0, splitIndex).join(' ').toUpperCase();\n    const secondPart = text.split(' ').splice(splitIndex).join(' ').toUpperCase();\n    return (\n      <>\n        <div className=\"Canvas__subtitle--redPart\">{firstPart}</div>\n        { secondPart && <div className=\"Canvas__subtitle--greenPart\">&nbsp;{secondPart}</div> }\n      </>\n    );\n  };\n\n  const downloadImage = () => {\n    toPng(canvasRef.current, { pixelRatio: 1 }).then((dataUrl) => {\n      const link = document.createElement('a');\n      link.download = `${primaryText.split(' ').splice(0, 3).join(' ')} (${new Date(Date.now()).toISOString().substring(0, 10)})`;\n      link.href = dataUrl;\n      link.click();\n    });\n  };\n\n  const shareImage = () => {\n    toPng(canvasRef.current, { pixelRatio: 1 }).then(async (dataUrl) => {\n      const blob = await (await fetch(dataUrl)).blob();\n      const files = [new File([blob], 'plakat.png', { type: blob.type, lastModified: new Date().getTime() })];\n      navigator.share({ files });\n    });\n  };\n\n  return (\n    <div className=\"outer-container\">\n      <div className=\"container\">\n        <div className=\"Toolbar\">\n          {/* <IconButton> <Rotate90DegreesCcwRounded /> </IconButton> */}\n          <IconButton onClick={downloadImage}>\n            <GetAppRounded />\n          </IconButton>\n          {navigator.share && (\n            <IconButton onClick={shareImage}>\n              <ShareRounded />\n            </IconButton>\n          )}\n        </div>\n        <div className=\"Canvas\" id=\"capture\" ref={canvasRef}>\n          <div className=\"Canvas__title\">{primaryText.toUpperCase()}</div>\n          <img src={`img-apple-160/${emoji}.png`} alt=\"\" />\n          {secondaryText && (\n            <div className=\"Canvas__subtitle\">\n              {decorateText(secondaryText)}\n            </div>\n          )}\n        </div>\n        <div className=\"Fields\">\n          <TextField\n            className=\"field\"\n            label=\"Felső szöveg\"\n            variant=\"outlined\"\n            value={primaryText}\n            onChange={(e) => setPrimaryText(e.target.value)}\n          />\n          <TextField\n            className=\"field\"\n            label=\"Alsó szöveg\"\n            variant=\"outlined\"\n            value={secondaryText}\n            onChange={(e) => setSecondarytext(e.target.value)}\n          />\n          <Picker onSelect={(emoji) => setEmoji(emoji.unified)} style={{width: '100%'}} exclude={['recent']} showSkinTones={false} showPreview={false}/>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
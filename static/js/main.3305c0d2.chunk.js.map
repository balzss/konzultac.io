{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["defaults","i18nHu","search","clear","notfound","skintext","categories","recent","smileys","people","nature","foods","activity","places","objects","symbols","flags","custom","categorieslabel","skintones","App","canvasRef","useRef","useState","primaryText","setPrimaryText","secondaryText","setSecondarytext","emoji","setEmoji","showWatermark","setShowWatermark","className","IconButton","onClick","toPng","current","pixelRatio","then","dataUrl","link","document","createElement","download","split","splice","join","Date","now","toISOString","substring","href","click","GetAppRounded","navigator","share","a","fetch","blob","files","File","type","lastModified","getTime","ShareRounded","id","ref","toUpperCase","src","alt","text","splitIndex","length","firstPart","secondPart","decorateText","style","opacity","color","fontFamily","fontWeight","position","bottom","right","fontStyle","TextField","label","variant","value","onChange","e","target","onSelect","unified","width","exclude","showSkinTones","showPreview","data","emojiDataHu","i18n","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.3305c0d2.chunk.js","sourcesContent":["import React, { useState, useRef } from 'react';\nimport {\n  TextField,\n  IconButton,\n} from '@material-ui/core'\nimport {\n  Rotate90DegreesCcwRounded,\n  GetAppRounded,\n  ShareRounded,\n} from '@material-ui/icons'\nimport { NimblePicker } from 'emoji-mart';\nimport emojiDataHu from './emojiMartHuData.json';\nimport { toPng } from 'html-to-image';\n\nimport 'emoji-mart/css/emoji-mart.css'\nimport './App.scss';\n\nconst defaults = {\n  primaryText: 'Ön is szeretne saját plakátot?',\n  secondaryText: 'Készítsen egyet!',\n  emoji: '1f9d1-200d-1f3a8', // artist emoji\n};\n\nconst i18nHu = {\n  search: 'Keresés',\n  clear: 'Törlés', // Accessible label on \"clear\" button\n  notfound: 'Nincs ilyen emoji',\n  skintext: 'Válassz alapértelmezett bőrtónust',\n  categories: {\n    search: 'Keresés eredménye',\n    recent: 'Gyakran használt',\n    smileys: 'Smiley és érzelmek',\n    people: 'Emberek és érzelmek',\n    nature: 'Állatok és természet',\n    foods: 'Ételek és italok',\n    activity: 'Sport és szabadidő',\n    places: 'Utazás és helyek',\n    objects: 'Tárgyak',\n    symbols: 'Szimbólumok',\n    flags: 'Zászlók',\n    custom: 'Egyéni',\n  },\n  categorieslabel: 'Emoji categories', // Accessible title for the list of categories\n  skintones: {\n    1: 'Default Skin Tone',\n    2: 'Light Skin Tone',\n    3: 'Medium-Light Skin Tone',\n    4: 'Medium Skin Tone',\n    5: 'Medium-Dark Skin Tone',\n    6: 'Dark Skin Tone',\n  },\n};\n\nconst App = () => {\n  const canvasRef = useRef(null);\n  const [primaryText, setPrimaryText] = useState(defaults.primaryText);\n  const [secondaryText, setSecondarytext] = useState(defaults.secondaryText);\n  const [emoji, setEmoji] = useState(defaults.emoji);\n  const [showWatermark, setShowWatermark] = useState(false);\n\n  const decorateText = (text) => {\n    const splitText = text.split(' ');\n    const splitIndex = splitText.length > 2 ? 2 : 1;\n    const firstPart = text.split(' ').splice(0, splitIndex).join(' ').toUpperCase();\n    const secondPart = text.split(' ').splice(splitIndex).join(' ').toUpperCase();\n    return (\n      <>\n        <div className=\"Canvas__subtitle--redPart\">{firstPart}</div>\n        { secondPart && <div className=\"Canvas__subtitle--greenPart\">&nbsp;{secondPart}</div> }\n      </>\n    );\n  };\n\n  const downloadImage = () => {\n    setShowWatermark(true);\n    toPng(canvasRef.current, { pixelRatio: 1 }).then((dataUrl) => {\n      setShowWatermark(false);\n      const link = document.createElement('a');\n      link.download = `${primaryText.split(' ').splice(0, 3).join(' ')} (${new Date(Date.now()).toISOString().substring(0, 10)})`;\n      link.href = dataUrl;\n      link.click();\n    });\n  };\n\n  const shareImage = () => {\n    setShowWatermark(true);\n    toPng(canvasRef.current, { pixelRatio: 1 }).then(async (dataUrl) => {\n      setShowWatermark(false);\n      const blob = await (await fetch(dataUrl)).blob();\n      const files = [new File([blob], 'plakat.png', { type: blob.type, lastModified: new Date().getTime() })];\n      navigator.share({ files });\n    });\n  };\n\n  return (\n    <div className=\"outer-container\">\n      <div className=\"container\">\n        <div className=\"Toolbar\">\n          {/* <IconButton> <Rotate90DegreesCcwRounded /> </IconButton> */}\n          <IconButton onClick={downloadImage}>\n            <GetAppRounded />\n          </IconButton>\n          {navigator.share && (\n            <IconButton onClick={shareImage}>\n              <ShareRounded />\n            </IconButton>\n          )}\n        </div>\n        <div className=\"Canvas\" id=\"capture\" ref={canvasRef}>\n          <div className=\"Canvas__title\">{primaryText.toUpperCase()}</div>\n          <img src={`img-apple-160/${emoji}.png`} alt=\"\" />\n          {secondaryText && (\n            <div className=\"Canvas__subtitle\">\n              {decorateText(secondaryText)}\n            </div>\n          )}\n          {showWatermark && (\n            <div style={{opacity: '0.2', color: 'white', fontFamily: 'Roboto Slab', fontWeight: '500', position: 'absolute', bottom: '8px', right: '12px', fontStyle: 'italic'}}>konzultac.io</div>\n          )}\n        </div>\n        <div className=\"Fields\">\n          <TextField\n            className=\"field\"\n            label=\"Felső szöveg\"\n            variant=\"outlined\"\n            value={primaryText}\n            onChange={(e) => setPrimaryText(e.target.value)}\n          />\n          <TextField\n            className=\"field\"\n            label=\"Alsó szöveg\"\n            variant=\"outlined\"\n            value={secondaryText}\n            onChange={(e) => setSecondarytext(e.target.value)}\n          />\n          <NimblePicker\n            onSelect={(emoji) => setEmoji(emoji.unified)}\n            style={{width: '100%'}}\n            exclude={['recent']}\n            showSkinTones={false}\n            showPreview={false}\n            data={emojiDataHu}\n            i18n={i18nHu}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}